// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract Voting {
    struct Candidate {
        string name;
        uint256 voteCount;
    }

    address public owner;
    mapping(address => bool) public voters;
    // Candidate[] public candidates;
    mapping(uint256 => Candidate) public candidates;
    uint256 public candidateId;

    event Voted(address voter);

    constructor() {
        owner = msg.sender;
    }

    function addCandidate(string memory name) public {
        require(msg.sender == owner, "Only the owner can add candidates.");
        candidateId++;
        candidates[candidateId] = Candidate(name, 0);
    }

    function vote(uint256 _candidateId) public {
        require(!voters[msg.sender], "You have already voted.");
        require(
            _candidateId > 0 && _candidateId < candidateId,
            "Invalid candidate ID."
        );
        voters[msg.sender] = true;
        candidates[candidateId].voteCount++;
        emit Voted(msg.sender);
    }

    // function getCandidate(uint256 _candidateId)
    //     public
    //     returns(Candidate memory)
    // {
    //     // return candidates[_candidateId];
    // }

    function getCandidate(uint256 _candidateId)
        public
        view
        returns (string memory, uint256)
    {
        require(
            _candidateId > 0 && _candidateId < candidateId,
            "Invalid candidate ID."
        );
        Candidate memory candidate = candidates[candidateId];
        return (candidate.name, candidate.voteCount);
    }
}
